import org.apache.tools.ant.filters.*;
plugins {
  	id 'groovy'
    id 'application'
	id "com.github.johnrengelman.shadow" version "2.0.2"
  	id "nebula.ospackage" version "4.6.0"
}
apply plugin: 'groovy'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "nebula.ospackage"

description = 'Cli Programm, which provides  Patch Service API through Command Line Interface  '

sourceCompatibility = 1.8
targetCompatibility = 1.8

def finalName = 'apg-patch-cli'

mainClassName = 'pli'
def repoTarget= version.endsWith("SNAPSHOT") ? "snapshots" : "releases"
jar {
	baseName = "${finalName}"
} 

def savedVersion = version

shadowJar {
	baseName = "${finalName}"
	classifier = null
   	version = null
	exclude 'cmd.sh'
	exclude '**/downloads/*'
	exclude '**/uploads/*'
}


dependencies {
	// Application dependencies
	compile project(':apg-patch-service-common')
	compile group: 'org.codehaus.groovy' , name: 'groovy-all', version: '2.4.1'
	compile 'org.codehaus.groovy:groovy-backports-compat23:2.4.5'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.4'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.4'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.4'
	runtime group: 'commons-cli' , name: 'commons-cli', version: '1.4'
	runtime group: 'oracle', name: 'ojdbc'
	testCompile project(':apg-patch-service-server')
	testCompile group: 'org.springframework', name: 'spring-test'
	testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'	
	testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
	testCompile 'cglib:cglib-nodep:3.2.2' // for stubbing of classes

}

sourceSets {
  test {
    resources {
      srcDir 'src/test/groovy'
      include '**/*.properties'
    }
  }
}

task pkgAsGTar(type: Tar) {
	from "$project.buildDir/${finalName}"
	archiveName = "${finalName}.tar.gz"
	compression = Compression.GZIP
}

task copyLib( type: Copy ) {
	into "$project.buildDir/${finalName}"
	from shadowJar
	fileMode 0755
	// In lib we only want jars files to go in lib folder (no dll, exe, bat, etc...)
	include "*.jar"
}


publishing {
	publications {
		cligtar(MavenPublication) {
			artifact source: pkgAsGTar, extension: 'tar.gz'
			artifactId = "${finalName}"
			pom.withXml { asNode().appendNode('description', 'From versions.properties generated dependency management pom.xml') }
		}
		withRpm(MavenPublication) {
			artifact buildRpm  {
				extension "rpm"
				classifier "centos"
			}
		}
	}
	repositories {
		maven {
			name ='deployRepo'
			url  "${mavenRepoBaseUrl}/${repoTarget}/"
			credentials {
				username = repoUser
				password = repoPassword
			}
		}

	}

}

def homeDir = "/opt/${finalName}"


// Netflix Nebula Os Package Configuration, see : https://github.com/nebula-plugins/gradle-ospackage-plugin/wiki
ospackage {
	packageName = "${finalName}"
	version = "${savedVersion}"
	release = 5
	os = LINUX
	type = BINARY
	arch = NOARCH


	into "${homeDir}"
	
	from(shadowJar.outputs.files) {
		fileMode 0644
		into 'bin'
	}

	from('packaging/bin') {
		include 'apscli.sh'
		fileMode 0755
		into 'bin'
		//expand project.properties
	}
	
	from('packaging/profile') {
		include 'apscli.sh'
		fileMode 0644
		user 'root'
		permissionGroup 'root'
		into '/etc/profile.d'
		//expand project.properties
	}
	
	from("packaging/conf") {
		into "/var/opt/apg-patch-common"
		fileType CONFIG | NOREPLACE
		include 'jdbc.groovy'
		user 'root'
		permissionGroup 'root'
		addParentDirs false
		// TODO (che,11.4)
		fileMode 0777

	}
}



assemble { dependsOn copyLib,pkgAsGTar}
build {dependsOn assemble }
publish {dependsOn build }
publishToMavenLocal {dependsOn build }
buildRpm {dependsOn processResources}


