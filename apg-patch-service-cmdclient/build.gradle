import com.github.jengelman.gradle.plugins.shadow.transformers.*
plugins {
  	id 'groovy'
    id 'application'
	id 'com.github.johnrengelman.shadow' version '5.2.0'
  	id 'nebula.ospackage' version '4.10.0'
  	id 'ivy-publish' 
}

description = 'Cli Programm, providinf Patch Service API through Restful API'

apply plugin: 'groovy'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'nebula.ospackage'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'ivy-publish'

def finalName = 'apg-patch-cli'

// In Case of SNAPSHOT build, we want a parameter as releaseNr
def releaseNbr =version.endsWith("SNAPSHOT") &&  project.rootProject.hasProperty('buildNumber') ? project.rootProject.property('buildNumber') : "1"
println "**** RELEASENR ${releaseNbr}"
mainClassName = 'pliStarter'
def repoTarget= version.endsWith("SNAPSHOT") ? "${mavenSnapshotsRepoName}" : "${mavenReleasesRepoName}"
jar {
	baseName = "${finalName}"
} 

def savedVersion = version

dependencies {
	// Application dependencies
	compile project(':apg-patch-service-api')
	compile group: 'org.codehaus.groovy' , name: 'groovy-all'
	compile group: 'org.codehaus.groovy' , name: 'groovy-backports-compat23'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
	runtime group: 'commons-cli' , name: 'commons-cli'
	runtime group: 'oracle', name: 'ojdbc'
	testCompile project(':apg-patch-service-server')
	testCompile group: 'org.springframework', name: 'spring-test'
	testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'	
	testCompile group: 'org.spockframework' ,name: 'spock-spring' 
	testCompile group: 'cglib' ,name: 'cglib-nodep' // for stubbing of classes

}

shadowJar {
	baseName = "${finalName}-fat"
	classifier = null
	version = null
	exclude 'cmd.sh'
	exclude '**/downloads/*'
	exclude '**/uploads/*'
	mergeServiceFiles()
	append 'META-INF/spring.handlers'
	append 'META-INF/spring.schemas'
	append 'META-INF/spring.tooling'
	transform(PropertiesFileTransformer) {
		paths = ['META-INF/spring.factories' ]
		mergeStrategy = "append"
	}
}

task copyLib( type: Copy ) {
	into "$project.buildDir/${finalName}"
	from shadowJar
	fileMode 0755
	// In lib we only want jars files to go in lib folder (no dll, exe, bat, etc...)
	include "*.jar"
}



def homeDir = "/opt/${finalName}"


// Netflix Nebula Os Package Configuration, see : https://github.com/nebula-plugins/gradle-ospackage-plugin/wiki
ospackage {
	packageName = "${finalName}"
	version = "${savedVersion}-${releaseNbr}"
	release = 1
	os = LINUX
	type = BINARY
	arch = NOARCH
	requires('aps' , "${savedVersion}",  EQUAL)
	
	into "${homeDir}"
	
	from(shadowJar.outputs.files) {
		fileMode 0644
		into 'bin'
	}

	from('pkg/rpm/bin') {
		include '*.sh'
		fileMode 0755
		into 'bin'
		//expand project.properties
	}
	
	from('pkg/rpm/profile') {
		include 'apscli.sh'
		fileMode 0644
		user 'root'
		permissionGroup 'root'
		into '/etc/profile.d'
		//expand project.properties
	}
	
	from("pkg/rpm/conf") {
		into "/etc/opt/${finalName}"
		fileType CONFIG | NOREPLACE
		include 'ops.properties'
		user 'root'
		permissionGroup 'jenkins'
		addParentDirs false
		fileMode 0740
	}
	
	from("pkg/rpm/conf") {
		into "/etc/opt/${finalName}"
		fileType CONFIG
		include 'application.properties'
		user 'root'
		addParentDirs false
		fileMode 0777
	}
}
 buildRpm {
 	// Parameter are as follow: directory(String path, int permissions, String user, String permissionGroup, boolean addParents)
 	directory ("/var/opt/${finalName}", 0775, "root", "jenkins", false)
}

publishing {
	publications {
		fatJar(MavenPublication) {
			artifact "${buildDir}/libs/${finalName}-fat.jar"
			artifactId "${finalName}-fat"
		}
	    zipPkg(MavenPublication) {
			artifact "${buildDir}/distributions/${projectDir.getName()}-${version}.zip"
		}
		yumRpm(IvyPublication) {
			artifact buildRpm.outputs.getFiles().getSingleFile()
		}
	}
	repositories {
		maven {
			name ='deployRepo'
			url  "${mavenRepoBaseUrl}/${repoTarget}/"
			credentials {
				username = mavenRepoUser
				password = mavenRepoPwd
			}
		}
	}
}

artifactoryPublish {}.dependsOn(buildRpm)
artifactory {
    contextUrl = "${mavenRepoBaseUrl}"  
    publish {

        repository {
            repoKey = "${yumRepoDevName}"   
            username = mavenRepoUser
            password = mavenRepoPwd
            ivy {
                 artifactLayout = "${buildRpm.outputs.getFiles().getSingleFile().getName()}"
            }
        }
        defaults {
            publications ('yumRpm')
            publishBuildInfo = false  
            publishArtifacts = true   
            publishPom = false   
            publishIvy = false  
        }
    }
}

//assemble { dependsOn copyLib,pkgAsGTar}
assemble { dependsOn copyLib}
buildRpm {dependsOn processResources, assemble}
publishToMavenLocal {dependsOn buildRpm}