package com.apgsga.artifact.query.impl;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
import org.eclipse.aether.resolution.ArtifactResolutionException;
import org.eclipse.aether.resolution.DependencyResolutionException;
import org.springframework.core.io.FileSystemResourceLoader;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;

import com.apgsga.artifact.query.ArtifactManager;
import com.apgsga.artifact.query.ArtifactVersionManager;

public class PropertyFileBasedVersionManager implements ArtifactVersionManager {

	private String propertyVersionParentFilePath;
	private ArtifactManager artifactManager;
	private String bomVersionId;
	private Resource propertyFileResource;

	public PropertyFileBasedVersionManager(String propertyVersionFilePath, URI mavenLocalPath, String bomGroupId,
			String bomArtifactId, String bomVersionId) {
		super();
		this.propertyVersionParentFilePath = propertyVersionFilePath;
		this.artifactManager = ArtifactManager.create(bomGroupId, bomArtifactId, mavenLocalPath.getPath());
		this.bomVersionId = bomVersionId;

	}

	@Override
	public String getVersionFor(String group, String name) {
		Properties versionsProperties = getProperties();
		return versionsProperties.getProperty(group + ":" + name);

	}

	private Properties getProperties() {
		Properties versionsProperties = null;
		if (propertyFileResource == null) {
			createPropertyFile();
			versionsProperties = intialLoad();
			storeProperties(versionsProperties);
		} else {
			versionsProperties = loadVersionProperties(propertyFileResource);
		}
		return versionsProperties;
	}

	private void createPropertyFile() {
		try {
			ResourceLoader rl = new FileSystemResourceLoader();
			Resource resourceParentDir = rl.getResource("file://" +propertyVersionParentFilePath);
			File parentDirectory  = resourceParentDir.getFile();
			if (!resourceParentDir.exists()) {
				if (!parentDirectory.mkdir()) {
					throw new RuntimeException("Couuld't create Parent Dir: " + parentDirectory.getAbsolutePath() + " for Version properties File");
				}
			}
			if (!parentDirectory.isDirectory()) {
				throw new RuntimeException("Parent File: " + parentDirectory.getAbsolutePath() + " isn't directory");
			}
			File versionsPropertiesFile = new File(parentDirectory, "versions.properties");
			if (!versionsPropertiesFile.exists()) {
				boolean created = versionsPropertiesFile.createNewFile();
				if (!created) {
					throw new RuntimeException("Version Property File: " + versionsPropertiesFile.getAbsolutePath() + " was'nt created");
				}
			}
			propertyFileResource = rl.getResource("file://" + versionsPropertiesFile.getAbsolutePath());
			
		} catch (IOException e) {
			throw new RuntimeException("Couuld't get Parent dir of Version properties File",e);

		}
	}

	private Properties loadVersionProperties(Resource propertyFileResource) {
		Properties versionsProperties = new Properties();
		try {
			versionsProperties.load(propertyFileResource.getInputStream());
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		return versionsProperties;
	}


	private Properties intialLoad() {
		Properties versionsProperties;
		try {
			versionsProperties = artifactManager.getVersionsProperties(bomVersionId);
			return versionsProperties;
		} catch (DependencyResolutionException | ArtifactResolutionException | IOException | XmlPullParserException e) {
			throw new RuntimeException(e);
		}
	}

	private void storeProperties(Properties versionsProperties) {
		try {
			Writer writer = new FileWriter(propertyFileResource.getFile());
			SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
			Date now = new Date();
			String strDate = sdfDate.format(now);
			versionsProperties.store(writer, "Generated by : " + this.getClass().getSimpleName() + " at: " + strDate);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public void updateVersion(String group, String name, String version) {
		Properties properties = getProperties();
		properties.replace(group + ":" + name, version);
		storeProperties(properties);
	}

}
