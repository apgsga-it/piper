package com.apgsga.dm.gradle;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import org.gradle.api.DefaultTask;
import org.gradle.api.GradleScriptException;
import org.gradle.api.InvalidUserDataException;
import org.gradle.api.tasks.TaskAction;

public class UpdateVersionsProperties extends DefaultTask {

	@TaskAction
	public void updateVersions() {
		VersionProperties parameters = getProject().getExtensions().findByType(VersionProperties.class);
		if (parameters == null)
			throw new InvalidUserDataException("Artefact Key must be provided");
		String targetArtefactKey = parameters.getTargetArtefactKey();
		if (targetArtefactKey == null)
			throw new InvalidUserDataException("Artefact Key must null be null, config: " + parameters.toString());
		String mavenVersion = parameters.getMavenVersion();
		if (mavenVersion == null)
			new InvalidUserDataException("Artefact Maven Version must null be null, config: " + parameters.toString());
		Properties versionProperties = new Properties();
		File parentDir = new File(parameters.getPropertiesFilePath());
		File versionPropertiesFile = new File(parentDir, "versions.properties");
		try {
			versionProperties.load(new FileReader(versionPropertiesFile));
		} catch (FileNotFoundException e) {
			throw new GradleScriptException("For config: " + parameters.toString(), e);
		} catch (IOException e) {
			throw new GradleScriptException("For config: " + parameters.toString(), e);
		}
		versionProperties.setProperty(targetArtefactKey, mavenVersion);
		SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		Date now = new Date();
		String strDate = sdfDate.format(now);
		try {
			versionProperties.store(new FileWriter(versionPropertiesFile),
					"Generated by : " + this.getClass().getSimpleName() + " at: " + strDate);
		} catch (IOException e) {
			throw new GradleScriptException("For config: " + parameters.toString(), e);
		}

	}

}
