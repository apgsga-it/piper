import org.apache.tools.ant.filters.*;
plugins {
  	id 'groovy'
    id 'application'
	id 'com.github.johnrengelman.shadow' version '2.0.2'
  	id 'nebula.ospackage' version '4.6.0'
  	id 'ivy-publish' 
}
apply plugin: 'groovy'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'nebula.ospackage'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'ivy-publish'

description = 'Cli programm, which initalizes Apg Service Configuration for a Platform '

sourceCompatibility = 1.8
targetCompatibility = 1.8

def finalName = 'apg-patch-target-configinit'

mainClassName = 'targetConfigInitStarter'
def repoTarget= version.endsWith("SNAPSHOT") ? "snapshots" : "releases"
jar {
	baseName = "${finalName}"
} 


def savedVersion = version

shadowJar {
	baseName = "${finalName}"
	classifier = null
    version = null
	exclude 'cmd.sh'
	exclude '**/downloads/*'
	exclude '**/uploads/*'
}


dependencies {
	// Application dependencies
	compile group: 'org.codehaus.groovy' , name: 'groovy-all'
	compile group: 'org.codehaus.groovy' , name: 'groovy-backports-compat23'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
	runtime group: 'commons-cli' , name: 'commons-cli'
	testCompile group: 'cglib' ,name: 'cglib-nodep' // for stubbing of classes

}


task pkgAsGTar(type: Tar) {
	from "$project.buildDir/${finalName}"
	archiveName = "${finalName}-${version}.tar.gz"
	compression = Compression.GZIP
}

task copyLib( type: Copy ) {
	into "$project.buildDir/${finalName}"
	from shadowJar
	fileMode 0755
	// In lib we only want jars files to go in lib folder (no dll, exe, bat, etc...)
	include "*.jar"
}



def homeDir = "/opt/${finalName}"


// Netflix Nebula Os Package Configuration, see : https://github.com/nebula-plugins/gradle-ospackage-plugin/wiki
ospackage {
	packageName = "${finalName}"
	version = "${savedVersion}"
	release = 3
	os = LINUX
	type = BINARY
	arch = NOARCH
	requires('aps' , "${savedVersion}",  EQUAL)
	
	into "${homeDir}"
	
	from(shadowJar.outputs.files) {
		fileMode 0644
		into 'bin'
	}

	from('packaging/bin') {
		include 'aps-target-configinit.sh'
		fileMode 0755
		into 'bin'
		//expand project.properties
	}
	
	from('packaging/profile') {
		include 'aps-target-configinit.sh'
		fileMode 0644
		user 'root'
		permissionGroup 'root'
		into '/etc/profile.d'
		//expand project.properties
	}
	
	from("packaging/conf") {
		into "/etc/opt/${finalName}"
		fileType CONFIG | NOREPLACE
		include 'init.properties'
		user 'root'
		addParentDirs false
		fileMode 0740
	}

	
}
 buildRpm {
 	// Parameter are as follow: directory(String path, int permissions, String user, String permissionGroup, boolean addParents)
 	directory ("/var/opt/${finalName}", 0775, "root", "jenkins", false)
}



publishing {
	publications {
	    targz(MavenPublication) {
			artifact source: pkgAsGTar, extension: 'tar.gz'
			artifactId = "${finalName}"
		}
		yumRpm(IvyPublication) {
			artifact buildRpm.outputs.getFiles().getSingleFile()
		}
	}
	repositories {
		maven {
			name ='deployRepo'
			url  "${mavenRepoBaseUrl}/${repoTarget}/"
			credentials {
				username = repoUser
				password = System.env.REPO_RO_PASSWD
			}
		}
	}
}

artifactoryPublish {}.dependsOn(buildRpm)
artifactory {
    contextUrl = "${mavenRepoBaseUrl}"  
    publish {

        repository {
            repoKey = 'yumrepodev'   
            username ="${repoUser}"
            password = System.env.REPO_RO_PASSWD
            ivy {
                 artifactLayout = "${buildRpm.outputs.getFiles().getSingleFile().getName()}"
            }
        }
        defaults {
            publications ('yumRpm')
            publishBuildInfo = false  
            publishArtifacts = true   
            publishPom = false   
            publishIvy = false  
        }
    }
}

assemble { dependsOn copyLib,pkgAsGTar}
buildRpm {dependsOn processResources, assemble}


